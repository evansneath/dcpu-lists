; file:
;     list_lib.dasm
;
; name:
;     list library v1.1
;
; author:
;     evan sneath - http://github.com/evansneath
;
; description:
;     this library provides data abstraction for lists.
;     at the moment, only unsigned values are supported
;     for functions such as max, min, and avg
;
; changelog:
;     4/14/2012 - v1.0 published
;     4/14/2012 - documentation changes
;     4/16/2012 - v1.1 changed registers to current standard ABI
;
; license:
;     this software is licensed under the open software
;     license version 3.0:
;     http://www.opensource.org/licenses/OSL-3.0
;
; package includes:
;     list_create
;     list_destroy
;     list_clear
;     list_set
;     list_get
;     list_push
;     list_pop
;     list_count
;     list_max
;     list_min
;     list_avg
;
; register uses:
;     A, B, C - function arguments (will be cleared)
;     A, B - function return register
;
; list format:
;     With the argument of A being head of the list, the
;     list should be formatted as follows.
;     [A] - size of list (N)
;     [A+1] - first element
;     ...
;     [A+(N-1)] - last element 
;
; example function call:
;     SET A, 0x2000
;     SET B, 4
;     JSR list_create
;
; caution:
;     1. these functions have no awareness of your memory data.
;     they will overwrite any data they encounter during
;     list_create, list_add, list_push.
;
;     2. for each function called, registers A, B, C will be
;     cleared of any data they happen to contain
;


:list_create
;
; description:
;     creates a new list with B elements all set to 0
;     at memory location A
;
; arguments:
;     A - starting address of new list
;     B - number of elements in list
;
SET [A], B         ; populate the list count with B
JSR list_clear
SET A, 0
SET B, 0
SET C, 0
SET PC, POP


:list_destroy
;
; description:
;     deletes any indication of list data from a target list
;     with memory location A
;
; arguments:
;     A - starting address of list to delete
;
JSR list_clear
SET [A], 0
SET A, 0
SET B, 0
SET C, 0
SET PC, POP


:list_clear
;
; description:
;     clears the entire list (setting elements to 0)
;     for a list with memory location A
;
; arguments:
;     A - starting address of list
;
SET B, 1           ; holds current index
SET C, A           ; holds current memory address

:loop_list_clear   ; for (index <= list.N) { list[index] = 0 }
IFG B, [A]
SET PC, cleanup_list_clear
SET [C+1], 0
ADD B, 1
ADD C, 1
SET PC, loop_list_clear

:cleanup_list_clear
SET A, 0
SET B, 0
SET C, 0
SET PC, POP


:list_set
;
; description:
;     given a list at memory location A, set its index B to C
;
; note:
;     index of list is from 0 to N-1
;
; arguments:
;     A - starting address of list
;     B - index
;     C - new value of index B
;
; returns:
;     A - success (0) or failure (1) based on index bounds
;
SET PUSH, J        ; allocate 2 local vars on stack
SET J, SP
SUB SP, 3
SET [J-1], A       ; [J-1] is new list addr
SET [J-2], B       ; [J-2] is new index arg
SET [J-3], C       ; [J-3] is new index value arg

JSR check_index    ; perform initial bounds checking
IFE A, 1           ; if A is out of bounds, end program
SET PC, cleanup_list_set

SET B, [J-2]
ADD B, 1
ADD B, [J-1]
SET [B], [J-3]     ; list[B] = C

:cleanup_list_set
SET B, 0
SET C, 0
SET [J-1], 0
SET [J-2], 0
SET [J-3], 0
SET SP, J
SET J, POP
SET PC, POP


:list_get
;
; description:
;     give a list at memory location A, get value of index B
;
; note:
;     index of list is from 0 to N-1
;
; arguments:
;     A - starting address of list
;     B - index
;
; returns:
;     A - success (0) or failure (1) based on index bounds
;     B - the value of the desired list index if A == 0
;
SET PUSH, J
SET J, SP
SUB SP, 2
SET [J-1], A       ; save args before check_index
SET [J-2], B

JSR check_index    ; perform initial bounds checking
IFE A, 1           ; if A is out of bounds, end program
SET PC, cleanup_list_get

SET C, [J-1]       ; restore args from stack
SET B, [J-2]

ADD B, 1
ADD B, C           ; calculate index mem addr
SET B, [B]         ; set B to index value

:cleanup_list_get
SET C, 0
SET [J-1], 0
SET [J-2], 0
SET SP, J
SET J, POP
SET PC, POP


:list_push
;
; description:
;     push a value B onto the end of the list starting at
;     memory address A
;
; arguments:
;     A - starting address of list
;     B - new value to push to list
;
ADD [A], 1         ; increment list count by 1
SET C, A
ADD C, [A]         ; set I to 
SET [C], B
SET A, 0
SET B, 0
SET C, 0
SET PC, POP


:list_pop
;
; description:
;     pop the last value from the list starting at memory
;     address A. store the value in B
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - the value popped from the list
;
SET B, A
ADD B, [A]
SUB [A], 1         ; list.N -= 1
SET A, [B]         ; A = list[last]
SET [B], 0         ; list[last] = 0
SET B, 0
SET C, 0
SET PC, POP


:list_count
;
; description:
;     returns the number of elements in the list to A for a
;     list starting at memory address A
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - number of elements in the list
;
SET A, [A]
SET B, 0
SET C, 0
SET PC, POP


:list_max
;
; description:
;     returns the maximum value of the list into A for a list
;     starting at memory address A upon call
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - maximum value found in the list
;
SET PUSH, J
SET J, SP
SUB SP, 1

SET B, 1           ; B is the loop iterator
SET C, A           ; C holds address of list element
SET [J-1], [A+1]   ; [J-1] holds the max value (first element)

:loop_list_max     ; for (B <= list.N) { check for max }
IFG B, [A]
SET PC, cleanup_list_max
IFG [C+1], [J-1]
SET [J-1], [C+1]   ; set [J-1] to new max value
ADD B, 1           ; increment B, C
ADD C, 1
SET PC, loop_list_max

:cleanup_list_max
SET A, [J-1]       ; on end, set max value found to A
SET B, 0           ; clear other used vars
SET C, 0
SET [J-1], 0       ; clean up stack
SET SP, J
SET J, POP
SET PC, POP


:list_min
;
; description:
;     returns the minimum value of the list into A for a list
;     starting at memory address A upon call
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - minimum value found in the list
;
SET PUSH, J
SET J, SP
SUB SP, 1

SET B, 1           ; B is the loop iterator
SET C, A           ; C holds address of list element
SET [J-1], [A+1]   ; [J-1] holds the min value (first element)
:loop_list_min     ; for (B <= list.N) { check for min }
IFG B, [A]
SET PC, cleanup_list_min
IFG [J-1], [C+1]
SET [J-1], [C+1]   ; set [J-1] to new min value
ADD B, 1           ; increment B, C
ADD C, 1
SET PC, loop_list_min

:cleanup_list_min
SET A, [J-1]       ; on end, set min value found to A
SET B, 0           ; clear other used vars
SET C, 0
SET [J-1], 0       ; clean up stack
SET SP, J
SET J, POP
SET PC, POP


:list_avg
;
; description:
;     returns the average of all the list elements into A for
;     a list starting at memory address A. note that the avg
;     value returned is truncated to floor(average)
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - average value of the list elements
;
SET PUSH, J
SET J, SP
SUB SP, 1

SET B, 1           ; B is the loop iterator
SET C, A           ; C holds address of list element
SET [J-1], 0       ; [J-1] holds the average of the elements

:loop_list_avg     ; for (B <= list.N) { [J+1] += list[B] }
IFG B, [A]
SET PC, cleanup_list_avg
ADD [J-1], [C+1]   ; add running total of all elements
ADD B, 1           ; increment B, C
ADD C, 1
SET PC, loop_list_avg

:cleanup_list_avg
SET B, [A]         ; have B hold list.N for now
SET A, [J-1]       ; on end, set min value found to A
DIV A, B           ; perform division to get average
SET B, 0           ; clear other used vars
SET C, 0
SET [J-1], 0       ; clean up stack
SET SP, J
SET J, POP
SET PC, POP


:check_index
;
; description:
;     this is just a data verification to check whether the
;     list index is index <= N-1. library users won't need
;     to call this
;
; arguments:
;     A - starting address of list
;     B - index to check for bounds
;
; returns:
;     A - returns success (0) or failure (1)
;
SET C, [A]
SUB C, 1           ; act as N-1 term
SET A, 0
IFG B, C           ; index > N-1 ? error : end
SET A, 1
SET B, 0
SET C, 0
SET PC, POP