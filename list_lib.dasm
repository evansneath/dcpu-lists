; name:
;     list library v1.1
;
; author:
;     Evan Sneath - http://github.com/evansneath
;
; description:
;     This library provides data abstraction for lists.
;     At the moment, only unsigned values are supported
;     for functions such as max, min, and avg
;
; changelog:
;     4/14/2012 - v1.0 published
;     4/14/2012 - documentation changes
;     4/16/2012 - v1.1 changed registers to current standard ABI
;
; license:
;     This software is licensed under the open software
;     license version 3.0:
;     http://www.opensource.org/licenses/OSL-3.0
;
; package includes:
;     list_create
;     list_destroy
;     list_clear
;     list_set
;     list_get
;     list_push
;     list_pop
;     list_count
;     list_max
;     list_min
;     list_avg
;
; register uses:
;     A, B, C - function arguments (will be cleared)
;     A, B - function return register
;
; list format:
;     With the argument of A being head of the list, the
;     list should be formatted as follows.
;     [A] - size of list (N)
;     [A+1] - first element
;     ...
;     [A+(N-1)] - last element 
;
; example function call:
;     set A, 0x2000
;     set B, 4
;     jsr list_create
;
; caution:
;     1. These functions have no awareness of your memory data.
;        They will overwrite any data they encounter during
;        list_create, list_add, list_push.
;
;     2. For each function called, registers A, B, C will be
;        cleared of any data they happen to contain
;


:list_create
;
; description:
;     Creates a new list with B elements all set to 0
;     at memory location A
;
; arguments:
;     A - starting address of new list
;     B - number of elements in list
;
    set [A], B         ; populate the list count with B
    jsr list_clear
    set A, 0
    set B, 0
    set C, 0
    set PC, POP


:list_destroy
;
; description:
;     Deletes any indication of list data from a target list
;     with memory location A
;
; arguments:
;     A - starting address of list to delete
;
    jsr list_clear
    set [A], 0
    set A, 0
    set B, 0
    set C, 0
    set PC, POP


:list_clear
;
; description:
;     Clears the entire list (setting elements to 0)
;     for a list with memory location A
;
; arguments:
;     A - starting address of list
;
    set B, 1           ; holds current index
    set C, A           ; holds current memory address

:loop_list_clear   ; for (index <= list.N) { list[index] = 0 }
    ifg B, [A]
        set PC, cleanup_list_clear

    set [C+1], 0
    add B, 1
    add C, 1
    set PC, loop_list_clear

:cleanup_list_clear
    set A, 0
    set B, 0
    set C, 0
    set PC, POP


:list_set
;
; description:
;     Given a list at memory location A, set its index B to C
;
; note:
;     index of list is from 0 to N-1
;
; arguments:
;     A - starting address of list
;     B - index
;     C - new value of index B
;
; returns:
;     A - success (0) or failure (1) based on index bounds
;
    set PUSH, J        ; allocate 2 local vars on stack
    set J, SP
    sub SP, 3
    set [J-1], A       ; [J-1] is new list addr
    set [J-2], B       ; [J-2] is new index arg
    set [J-3], C       ; [J-3] is new index value arg

    jsr check_index    ; perform initial bounds checking
    
    ife A, 1           ; if A is out of bounds, end program
        set PC, cleanup_list_set

    set B, [J-2]
    add B, 1
    add B, [J-1]
    set [B], [J-3]     ; list[B] = C

:cleanup_list_set
    set B, 0
    set C, 0
    set [J-1], 0
    set [J-2], 0
    set [J-3], 0
    set SP, J
    set J, POP
    set PC, POP


:list_get
;
; description:
;     Give a list at memory location A, get value of index B
;
; note:
;     index of list is from 0 to N-1
;
; arguments:
;     A - starting address of list
;     B - index
;
; returns:
;     A - success (0) or failure (1) based on index bounds
;     B - the value of the desired list index if A == 0
;
    set PUSH, J
    set J, SP
    sub SP, 2
    set [J-1], A       ; save args before check_index
    set [J-2], B

    jsr check_index    ; perform initial bounds checking
    
    ife A, 1           ; if A is out of bounds, end program
        set PC, cleanup_list_get

    set C, [J-1]       ; restore args from stack
    set B, [J-2]

    add B, 1
    add B, C           ; calculate index mem addr
    set B, [B]         ; set B to index value

:cleanup_list_get
    set C, 0
    set [J-1], 0
    set [J-2], 0
    set SP, J
    set J, POP
    set PC, POP


:list_push
;
; description:
;     Push a value B onto the end of the list starting at
;     memory address A
;
; arguments:
;     A - starting address of list
;     B - new value to push to list
;
    add [A], 1         ; increment list count by 1
    set C, A
    add C, [A]         ; set I to 
    set [C], B
    set A, 0
    set B, 0
    set C, 0
    set PC, POP


:list_pop
;
; description:
;     Pop the last value from the list starting at memory
;     address A. Store the value in B
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - the value popped from the list
;
    set B, A
    add B, [A]
    sub [A], 1         ; list.N -= 1
    set A, [B]         ; A = list[last]
    set [B], 0         ; list[last] = 0
    set B, 0
    set C, 0
    set PC, POP


:list_count
;
; description:
;     Returns the number of elements in the list to A for a
;     list starting at memory address A
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - number of elements in the list
;
    set A, [A]
    set B, 0
    set C, 0
    set PC, POP


:list_max
;
; description:
;     Returns the maximum value of the list into A for a list
;     starting at memory address A upon call
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - maximum value found in the list
;
    set PUSH, J
    set J, SP
    sub SP, 1

    set B, 1           ; B is the loop iterator
    set C, A           ; C holds address of list element
    set [J-1], [A+1]   ; [J-1] holds the max value (first element)

:loop_list_max     ; for (B <= list.N) { check for max }
    ifg B, [A]
        set PC, cleanup_list_max

    ifg [C+1], [J-1]
        set [J-1], [C+1]   ; set [J-1] to new max value

    add B, 1           ; increment B, C
    add C, 1
    set PC, loop_list_max

:cleanup_list_max
    set A, [J-1]       ; on end, set max value found to A
    set B, 0           ; clear other used vars
    set C, 0
    set [J-1], 0       ; clean up stack
    set SP, J
    set J, POP
    set PC, POP


:list_min
;
; description:
;     Returns the minimum value of the list into A for a list
;     starting at memory address A upon call
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - minimum value found in the list
;
    set PUSH, J
    set J, SP
    sub SP, 1

    set B, 1           ; B is the loop iterator
    set C, A           ; C holds address of list element
    set [J-1], [A+1]   ; [J-1] holds the min value (first element)

:loop_list_min     ; for (B <= list.N) { check for min }
    ifg B, [A]
        set PC, cleanup_list_min

    ifg [J-1], [C+1]
        set [J-1], [C+1]   ; set [J-1] to new min value

    add B, 1           ; increment B, C
    add C, 1
    set PC, loop_list_min

:cleanup_list_min
    set A, [J-1]       ; on end, set min value found to A
    set B, 0           ; clear other used vars
    set C, 0
    set [J-1], 0       ; clean up stack
    set SP, J
    set J, POP
    set PC, POP


:list_avg
;
; description:
;     Returns the average of all the list elements into A for
;     a list starting at memory address A. Note that the avg
;     value returned is truncated to floor(average)
;
; arguments:
;     A - starting address of list
;
; returns:
;     A - average value of the list elements
;
    set PUSH, J
    set J, SP
    sub SP, 1

    set B, 1           ; B is the loop iterator
    set C, A           ; C holds address of list element
    set [J-1], 0       ; [J-1] holds the average of the elements

:loop_list_avg     ; for (B <= list.N) { [J+1] += list[B] }
    ifg B, [A]
        set PC, cleanup_list_avg

    add [J-1], [C+1]   ; add running total of all elements
    add B, 1           ; increment B, C
    add C, 1
    set PC, loop_list_avg

:cleanup_list_avg
    set B, [A]         ; have B hold list.N for now
    set A, [J-1]       ; on end, set min value found to A
    div A, B           ; perform division to get average
    set B, 0           ; clear other used vars
    set C, 0
    set [J-1], 0       ; clean up stack
    set SP, J
    set J, POP
    set PC, POP


:check_index
;
; description:
;     This is just a data verification to check whether the
;     list index is index <= N-1. Library users won't need
;     to call this
;
; arguments:
;     A - starting address of list
;     B - index to check for bounds
;
; returns:
;     A - returns success (0) or failure (1)
;
    set C, [A]
    sub C, 1           ; act as N-1 term
    set A, 0

    ifg B, C           ; index > N-1 ? error : end
        set A, 1

    set B, 0
    set C, 0
    set PC, POP