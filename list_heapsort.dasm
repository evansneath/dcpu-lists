:list_heapsort
;
; name:
;     Heap Sort Algorithm v1.0
;
; author:
;     Evan Sneath - http://github.com/evansneath
;
; description:
;     A heap sort algorithm. This algorithm is compatible
;     with my defined list data type. The list functions
;     can be found here: https://gist.github.com/2385969
;
;     This algorithm is based of the pseudocode for heapsort
;     found at the following wikipedia page: 
;     http://en.wikipedia.org/wiki/Heap_sort
;
; changelog:
;     4/19/2012 - version 1.0 published
;
; license:
;     This software is licensed under the open software
;     license version 3.0:
;     http://www.opensource.org/licenses/OSL-3.0
; 
; arguments:
;     A - address of list
;
; list format:
;     With the argument of A being head of the list, the
;     list should be formatted as follows.
;     [A] - size of list (N)
;     [A+1] - first element
;     ...
;     [A+(N-1)] - last element
;
; example list:
;     set [0x4000], 4
;     set [0x4001], 7
;     set [0x4002], 5
;     set [0x4003], 9
;     set [0x4005], 1
;
; example function call:
;     set A, 0x4000
;     jsr list_heapsort

:init
    set PUSH, O           ; preserve all registers on the stack
    set PUSH, J
    set PUSH, I
    set PUSH, Z
    set PUSH, Y
    set PUSH, X
    set PUSH, C
    set PUSH, B
    set PUSH, A           ; A is the location of list in memory

:main
    jsr heapify           ; heapify(A)

    set C, [A]            ; C = end <= count - 1
    sub C, 1
    set B, 0              ; B = start <= 0

:main_loop
    ife C, 0              ; while (end > 0) do
        set PC, cleanup       ; condition false, cleanup program
        
    set I, C
    set J, 0
    jsr swap              ; swap(list[end], list[0])
    sub C, 1              ; end <= end - 1
    jsr sift_down
    set PC, main_loop

:heapify              ; heapify(A=list_addr)
    set B, [A]            ; [A] = count, B = start
    sub B, 2
    div B, 2              ; start = (count - 2) / 2
    set C, [A]            ; C = end = count - 1
    sub C, 1

:heapify_loop
    ife B, 0xffff         ; while (start >= 0) do
        set PC, heapify_end   ; start < 0, end heapify

    jsr sift_down         ; sift_down(A, B=start, C=count - 1)
    sub B, 1              ; start <= start - 1
    set PC, heapify_loop  ; end while

:heapify_end
    set PC, POP           ; return to function call

:sift_down            ; sift_down(A=list_addr, B=start, C=end)
    set X, B              ; X = root <= start

:sift_loop
    set Y, X              ; Y = child <= root * 2 + 1
    mul Y, 2
    add Y, 1

    ifg Y, C              ; while (child <= end) do
        set PC, sift_end      ; child > end, end sift_down

    set Z, X              ; Z = swap <= root
    set I, Y
    set J, Z
    jsr ifg_element

    ife I, 1              ; if (list[child] > list[swap])
        set Z, Y              ; { swap <= child }

    add Y, 1              ; child <= child + 1

    ifg Y, C              ; if (child <= end)
        set PC, sift_break    ; child > end, skip to break

    set I, Y
    set J, Z
    jsr ifg_element
    
    ife I, 1              ; if (list[child] > list[swap])
        set Z, Y              ; { swap <= child }

:sift_break
    ife Z, X              ; if (swap != root)
        set PC, sift_end      ; swap == root, end sift_down

    set I, X
    set J, Z
    jsr swap              ; swap(list[root], list[swap])
    set X, Z              ; root <= swap
    set PC, sift_loop

:sift_end
    set PC, POP

:ifg_element          ; I <= ifg_element(I=index1, J=index2)
    add I, 1
    add I, A
    add J, 1
    add J, A
    
    ifg [I], [J]          ; if (list[index1] > list[index2])
        set PC, break_ifg     ; { I <= 1 }
    
    set I, 0              ; else
    set PC, POP           ; { I <= 0 }

:break_ifg
    set I, 1
    set PC, POP

:swap                 ; swap(I=index1, J=index2)
    add I, 1
    add I, A              ; calculate to get I <= list[index1]
    add J, 1
    add J, A              ; calculate to get J <= list[index2]
    set O, [I]            ; O = tmp <= list[index1]
    set [I], [J]          ; list[index1] <= list[index2]
    set [J], O            ; list[index2] <= tmp
    set PC, POP

:cleanup
    set A, POP            ; restore register values
    set B, POP
    set C, POP
    set X, POP
    set Y, POP
    set Z, POP
    set I, POP
    set J, POP
    set O, POP
    set PC, POP           ; return from heapify